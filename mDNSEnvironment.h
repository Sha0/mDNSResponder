/* * Copyright (c) 2002 Apple Computer, Inc. All rights reserved. * * @APPLE_LICENSE_HEADER_START@ * * The contents of this file constitute Original Code as defined in and * are subject to the Apple Public Source License Version 1.1 (the * "License").  You may not use this file except in compliance with the * License.  Please obtain a copy of the License at * http://www.apple.com/publicsource and read it before using this file. * * This Original Code and all software distributed under the License are * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the * License for the specific language governing rights and limitations * under the License. * * @APPLE_LICENSE_HEADER_END@ */// mDNS-PlatformEnvironment.h needs to ensure that all the common types from mDNS-PortableEnvironment.h// are defined, plus whatever additional types are needed to support a particular platform// C files should include either mDNS-PortableEnvironment.h or mDNS-PlatformEnvironment.h, but not both.// To add support for a new target platform with its own networking APIs and types,// duplicate the "#elif __SOME_OTHER_OS__" section (including its two-line comment// at the start) and add support for the new target platform in the new section.#ifdef	__cplusplus	extern "C" {#endif// ***************************************************************************// Classic Mac (Open Transport) structures#if __MACOS__// Headers needed for code on this platform#include <OpenTptInternet.h>#include <OpenTptClient.h>// Subset of mDNS-PortableEnvironment.h that's needed here#define local static#define export// Mac OS headers already define Boolean, UInt8, etc.typedef union  { unsigned char b[2]; UInt16 NotAnInteger; } Opaque16;typedef union  { unsigned char b[4]; UInt32 NotAnInteger; } Opaque32;typedef Opaque16 IPPort;typedef Opaque32 IPAddr;static const IPPort zeroIPPort;static const IPAddr zeroIPAddr;typedef enum	{	mOT_Reset = 0,	mOT_Start,	mOT_ReusePort,	mOT_RcvDestAddr,	mOT_LLScope,	mOT_AdminScope,	mOT_Bind,	mOT_Ready	} mOT_State;typedef struct { TOptionHeader h; IPAddr multicastGroupAddress; IPAddr interfaceAddress; } TIPAddMulticastOption;typedef struct { TOptionHeader h; UInt32 flag; } TSetBooleanOption;// TOptionBlock is a union of various types.// What they all have in common is that they all start with a TOptionHeader.typedef union  { TOptionHeader h; TIPAddMulticastOption m; TSetBooleanOption b; } TOptionBlock;struct mDNS_PlatformSupport_struct	{	EndpointRef ep;	UInt32 mOTstate;				// mOT_State enum	TOptionBlock optBlock;	TOptMgmt optReq;	long OTTimerTask;	UInt32 nesting;	};// ***************************************************************************// Mac OS X structures#elif __MACOSX__// Headers needed for code on this platform#include <CoreFoundation/CoreFoundation.h>#include <sys/socket.h>#include <netinet/in.h>#include <DNSServiceDiscovery/DNSServiceDiscovery.h>// Subset of mDNS-PortableEnvironment.h that's needed here#define local static#define export// Mac OS X headers already define Boolean, UInt8, etc.typedef union  { unsigned char b[4]; UInt32 NotAnInteger; } Opaque32;typedef Opaque16 IPPort;typedef Opaque32 IPAddr;static const IPPort zeroIPPort;static const IPAddr zeroIPAddr;// Extra definitions needed for code on this platformstruct mDNS_PlatformSupport_struct	{	int socket;    CFSocketRef cfsocket;	CFRunLoopTimerRef cftimer;	};// ***************************************************************************// Placeholder for future platforms#elif __SOME_OTHER_OS__#error Other platforms need to make sure that types like UInt16 are defined// ***************************************************************************// Generic code for Unix-style platforms#else#endif#ifdef	__cplusplus	}#endif