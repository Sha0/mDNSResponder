/* * Copyright (c) 2002 Apple Computer, Inc. All rights reserved. * * @APPLE_LICENSE_HEADER_START@ * * The contents of this file constitute Original Code as defined in and * are subject to the Apple Public Source License Version 1.1 (the                                                               * "License").  You may not use this file except in compliance with the * License.  Please obtain a copy of the License at * http://www.apple.com/publicsource and read it before using this file. * * This Original Code and all software distributed under the License are * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the * License for the specific language governing rights and limitations * under the License. * * @APPLE_LICENSE_HEADER_END@ */// ***************************************************************************// Support functions which must be provided by each set of specific PlatformSupport files// mDNSPlatformInit typically opens a communication endpoint, and starts listening for mDNS packets.// When Setup is complete, the callback is called.// When a packet is received, the PlatformSupport code calls mDNSCoreReceive()// mDNSPlatformClose tidies up on exit// mDNSPlatformSendUDP sends one UDP packet#include "mDNSClientAPI.h"				// Defines the interface provided to the client layer above#ifdef	__cplusplus	extern "C" {#endif// ***************************************************************************// DNS protocol message formattypedef struct	{	Opaque16 id;	Opaque16 flags;	UInt16 numQuestions;	UInt16 numAnswers;	UInt16 numAuthorities;	UInt16 numAdditionals;	} DNSMessageHeader;typedef struct	{	DNSMessageHeader h;		// Note: Size 12 bytes	UInt8 data[1460];		// Total packet size 1500 = 20 (IP) + 8 (UDP) + 12 (header) + 1460 (data)	} DNSMessage;// ***************************************************************************// Constants//#define NameServerPortAsNumber 53#define NameServerPortAsNumber 5353static const IPPort NameServerPort   = { { NameServerPortAsNumber >> 8, NameServerPortAsNumber & 0xFF } };static const IPAddr AllDNSLinkGroup  = { { 224,   0,   0, 251 } };static const IPAddr AllDNSAdminGroup = { { 239, 255, 255, 251 } };// ***************************************************************************// Functions// Every platform support module must provide the following functionsextern mStatus mDNSPlatformInit   (      mDNS *const m);extern void    mDNSPlatformClose  (const mDNS *const m);extern mStatus mDNSPlatformSendUDP(const mDNS *const m, const DNSMessage *const msg, const void *const end, IPAddr src, IPAddr dst, IPPort port);extern void    mDNSPlatformScheduleTask(const mDNS *const m, SInt32 NextTaskTime);extern void    mDNSPlatformLock        (const mDNS *const m);extern void    mDNSPlatformUnlock      (const mDNS *const m);extern       void    mDNSPlatformStrCopy(const void *src,       void *dst);extern       void    mDNSPlatformMemCopy(const void *src,       void *dst, UInt32 len);extern       Boolean mDNSPlatformMemSame(const void *src, const void *dst, UInt32 len);extern       void    mDNSPlatformMemZero(                       void *dst, UInt32 len);extern       SInt32  mDNSPlatformTimeNow();extern const SInt32  mDNSPlatformOneSecond;// The core mDNS code provides this function, for the platform support code to call every time a packet arrivesextern void    mDNSCoreReceive    (mDNS *const m,       DNSMessage *const msg, const void *const end, IPAddr srcaddr, IPPort srcport, IPAddr dstaddr, IPAddr interface);// The core mDNS code provides this function, for the platform support code to call back at the time prescribed by the mDNSPlatformScheduleTask callextern void    mDNSCoreTask       (mDNS *const m);#ifdef	__cplusplus	}#endif